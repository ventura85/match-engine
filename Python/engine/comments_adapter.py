from __future__ import annotations
from typing import List
import random
from .comments_repo_mvp import CommentsRepoMVP

# Mapujemy zdarzenia na mo≈ºliwe klucze w paczce (z fallbackami)
KEYS = {
    "announce": ["announce", "offense", "akcja", "build_up"],
    "shot_saved": ["shot_saved", "save", "strzal_obroniony"],
    "shot_off": ["shot_off", "off_target", "strzal_obok"],
    "clearance": ["clearance", "wybicie", "def_clear"],
    "throw_in": ["throw_in", "aut", "wrzut_aut"],
    "corner_wasted": ["corner_wasted", "corner_lost", "rog_niewykorzystany"],
    "goal": ["goal", "gol"],
    # Makro-narracje (d≈Çu≈ºsze bloki)
    "macro_build": ["build_up_long", "build_up_rich", "macro_build"],
    "pressure": ["pressure", "wysoki_pressing", "napor"],
    "momentum": ["momentum_shift", "momentum", "zmiana_momentum"],
    "endgame": ["endgame_drama", "koncowka_dramat", "drama"],
    "calm": ["calm_down", "uspokojenie", "kontrola_tempo"],
}

DEFAULTS = {
    "announce": ["‚Ä¢ {team} w ofensywie‚Ä¶"],
    "shot_saved": ["‚õî Strza≈Ç obroniony."],
    "shot_off": ["‚ùå Strza≈Ç obok."],
    "clearance": ["üßπ Wybicie."],
    "throw_in": ["‚ÜîÔ∏è Aut."],
    "corner_wasted": ["ü™£ R√≥g niewykorzystany."],
    "goal": ["‚öΩ GOL! {team} prowadzi {scoreA}:{scoreB}."],
    # D≈Çu≈ºsze bloki ‚Äì 2‚Äì3 zdania ka≈ºdy (fallbacki)
    "macro_build": [
        "{team} uspokaja grƒô kr√≥tkimi podaniami. {minute}' ‚Äì pi≈Çka krƒÖ≈ºy od nogi do nogi, rywal biega za cieniem. Publiczno≈õƒá wyczuwa, ≈ºe to preludium do czego≈õ konkretnego.",
        "D≈Çugie posiadanie {team}, bez wymusze≈Ñ. Po cierpliwym rozegraniu pojawia siƒô przestrze≈Ñ miƒôdzy liniami ‚Äì ≈ÇapiƒÖ rytm i pewno≈õƒá."],
    "pressure": [
        "{team} dociƒÖ≈ºa pressingiem, zamykajƒÖ rywala g≈Çƒôboko. Do≈õrodkowanie ‚Äì wybite, ale pi≈Çka wraca i narasta presja w defensywie.",
        "Kolejne fale ataku {team}. Druga pi≈Çka zawsze ich, trybuny podrywajƒÖ siƒô ‚Äì to mo≈ºe byƒá moment prze≈Çomowy."],
    "momentum": [
        "Po chwili chaosu ‚Äì prze≈Çamanie. {team} zaczyna dyktowaƒá warunki: dwa szybkie ataki, ro≈õnie tempo i odwaga z pi≈ÇkƒÖ.",
        "Zmiana akcent√≥w: {team} przejmuje inicjatywƒô, rywal tylko gasi po≈ºary. WabiƒÖ na jednƒÖ stronƒô, by uderzyƒá po drugiej."],
    "endgame": [
        "Ko≈Ñc√≥wka tej ods≈Çony i robi siƒô gƒôsto. Ka≈ºdy kontakt na granicy faulu, ka≈ºdy aut na wagƒô z≈Çota ‚Äì wszyscy liczƒÖ sekundy.",
        "Ostatnie chwile i adrenalina na maksie. W polu karnym iskrzy ‚Äì teraz liczy siƒô charakter i zimna krew."],
    "calm": [
        "Gra zwalnia ‚Äì {team} trzyma pi≈Çkƒô i czeka na b≈ÇƒÖd. ≈öwiadome zarzƒÖdzanie tempem, ≈ºeby odzyskaƒá oddech i kontrolƒô.",
        "Zamiast szar≈ºy ‚Äì rozsƒÖdek. {team} przepycha pi≈Çkƒô w bezpiecznych sektorach, rytm celowo st≈Çumiony."],
}


class Comments:
    def __init__(self, pack: str = "pl_fun", lang: str = "pl", no_repeat_window: int = 3):
        self.repo = CommentsRepoMVP(lang=lang, pack=pack, no_repeat_window=no_repeat_window)
        self.repo.load()
        # U≈ºyj globalnego RNG (seedowanego przez set_random_seed) dla powtarzalno≈õci narracji
        self.repo.rng = random

    def _pick(self, kind: str, **kw) -> str:
        for key in KEYS[kind]:
            t = self.repo.pick(key, **kw)
            if t:
                return t
        # fallback tekst
        import random
        return random.choice(DEFAULTS[kind]).format(**kw)

    # API u≈ºywane przez silnik (kr√≥tkie/mikro)
    def announce(self, *, team: str, minute: str) -> str:
        return self._pick("announce", team=team, minute=minute)

    def goal(self, *, team: str, minute: str, scoreA: int, scoreB: int) -> str:
        return self._pick("goal", team=team, minute=minute, scoreA=scoreA, scoreB=scoreB)

    def shot_saved(self, *, team: str, minute: str) -> str:
        return self._pick("shot_saved", team=team, minute=minute)

    def shot_off(self, *, team: str, minute: str) -> str:
        return self._pick("shot_off", team=team, minute=minute)

    def clearance(self, *, team: str, minute: str) -> str:
        return self._pick("clearance", team=team, minute=minute)

    def throw_in(self, *, team: str, minute: str) -> str:
        return self._pick("throw_in", team=team, minute=minute)

    def corner_wasted(self, *, team: str, minute: str) -> str:
        return self._pick("corner_wasted", team=team, minute=minute)

    # D≈Çu≈ºsze, rzadziej emitowane komentarze (makro‚Äënarracje)
    def macro(self, kind: str, **kw) -> str:
        """Zwraca d≈Çu≈ºszy blok narracji dla danego rodzaju sytuacji.

        kind: jedna z {"macro_build", "pressure", "momentum", "endgame", "calm"}
        """
        return self._pick(kind, **kw)
