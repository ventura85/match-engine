            try:
                from .comments import Commentary as _C
                txt = _C.keep_patience()
                self._add_event(minute, 'micro', f"{minute}' - {txt}")
            except Exception:
                pass
        # Outcome line
        outcome_txt = ''
        if repo is not None:
            try:
                outcome_txt = repo.pick(outcome_key, **context) or ''
            except Exception:
                outcome_txt = ''
        if not outcome_txt:
            # Fallbacki, jeœli brak klucza w paczce
            if outcome_key == 'corner':
                try:
                    from .comments import Commentary as _C
                    outcome_txt = _C.corner_for(context.get('team',''))
                except Exception:
                    outcome_txt = f"Rzut ro¿ny dla {context.get('team','')}!"
            elif outcome_key == 'freekick':
                try:
                    from .comments import Commentary as _C
                    outcome_txt = _C.free_kick()
                except Exception:
                    outcome_txt = "Rzut wolny."
        outcome_txt = format_names(outcome_txt, context)
        self._add_event(minute, final_kind, f"{minute}' - {outcome_txt}")

    def _build_report(self) -> Dict:
        def _compress_minute(m: int) -> int:
            # mapuj 1..90 -> 1..10, pomijaj 0
            if m < 1:
                return 1
