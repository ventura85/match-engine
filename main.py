"""
G≈Ç√≥wny punkt wej≈õcia dla symulatora meczu pi≈Çkarskiego.

Uruchomienie: python main.py --teamA "Red Lions" --teamB "Blue Hawks" --seed 42 --verbose
"""
import argparse
import json
import sys
from pathlib import Path
from typing import Dict, List

from models.player import Player
from models.team import Team
from engine.match import MatchEngine
from engine.utils import set_random_seed


def load_teams_from_json(filepath: str = 'data/teams.json') -> Dict[str, Team]:
    """
    ≈Åaduje dane dru≈ºyn z pliku JSON.
    
    Args:
        filepath: ≈öcie≈ºka do pliku JSON
        
    Returns:
        S≈Çownik z nazwƒÖ dru≈ºyny jako kluczem i obiektem Team jako warto≈õciƒÖ
    """
    with open(filepath, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    teams = {}
    for team_data in data['teams']:
        # Konwertuj dane zawodnik√≥w na obiekty Player
        players = []
        for p_data in team_data['players']:
            player = Player(
                id=p_data['id'],
                name=p_data['name'],
                position=p_data['position'],
                attributes=p_data['attributes'],
                energy=p_data.get('energy', 1.0),
                form=p_data.get('form', 1.0),
                traits=p_data.get('traits', [])
            )
            players.append(player)
        
        # Utw√≥rz obiekt Team
        team = Team(
            name=team_data['name'],
            players=players,
            formation=team_data.get('formation', '4-4-2'),
            style=team_data.get('style', 'balanced'),
            attack_channel=team_data.get('attack_channel', 'center')
        )
        teams[team.name] = team
    
    return teams


def print_match_report(report: Dict) -> None:
    """
    Wypisuje szczeg√≥≈Çowy raport z meczu w czytelnym formacie.
    
    Args:
        report: S≈Çownik z raportem z meczu
    """
    print("\n" + "="*70)
    print(f"RAPORT Z MECZU: {report['team_a']} vs {report['team_b']}")
    print("="*70)
    
    # Wynik ko≈Ñcowy
    print(f"\nüìä WYNIK KO≈ÉCOWY: {report['team_a']} {report['score'][0]} - {report['score'][1]} {report['team_b']}")
    
    # Bramki
    if report['goals']:
        print(f"\n‚öΩ BRAMKI ({len(report['goals'])}):")
        for goal in report['goals']:
            print(f"   {goal['minute']}' - {goal['scorer']} ({goal['team']})")
    else:
        print("\n‚öΩ BRAMKI: Brak bramek w tym meczu")
    
    # Statystyki
    print(f"\nüìà STATYSTYKI:")
    print(f"   Posiadanie pi≈Çki:")
    print(f"      {report['team_a']}: {report['possession'][report['team_a']]}%")
    print(f"      {report['team_b']}: {report['possession'][report['team_b']]}%")
    
    print(f"\n   Strza≈Çy:")
    print(f"      {report['team_a']}: {report['shots'][report['team_a']]} ({report['shots_on_target'][report['team_a']]} celnych)")
    print(f"      {report['team_b']}: {report['shots'][report['team_b']]} ({report['shots_on_target'][report['team_b']]} celnych)")
    
    # Wp≈Çyw taktyki
    if 'tactical_impact' in report:
        tactical = report['tactical_impact']
        print(f"\n‚öôÔ∏è  ANALIZA TAKTYCZNA:")
        print(f"   {report['team_a']} (styl: {tactical['team_a_style']}) - Skuteczno≈õƒá strza≈Ç√≥w: {tactical['shots_efficiency_a']}%")
        print(f"   {report['team_b']} (styl: {tactical['team_b_style']}) - Skuteczno≈õƒá strza≈Ç√≥w: {tactical['shots_efficiency_b']}%")
    
    # Zmiany
    if 'substitutions' in report and report['substitutions']:
        print(f"\nüîÑ ZMIANY ({len(report['substitutions'])}):")
        for sub in report['substitutions']:
            print(f"   {sub['minute']}' - {sub['team']}: {sub['player_out']} (pow√≥d: {sub['reason']})")
    
    # Kluczowe zdarzenia
    important_events = [e for e in report['events'] if e['event_type'] in ['goal', 'shot_saved', 'successful_dribble']]
    if important_events:
        print(f"\nüî• KLUCZOWE ZDARZENIA ({len(important_events)}):")
        for event in important_events[:15]:  # Poka≈º max 15 najwa≈ºniejszych
            print(f"   {event['minute']}' - {event['description']} ({event['team']})")
    
    print("\n" + "="*80)


def main():
    """G≈Ç√≥wna funkcja programu."""
    parser = argparse.ArgumentParser(
        description='Symulator meczu pi≈Çkarskiego - Football Manager Match Engine'
    )
    parser.add_argument(
        '--teamA',
        type=str,
        default='Red Lions',
        help='Nazwa pierwszej dru≈ºyny (domy≈õlnie: Red Lions)'
    )
    parser.add_argument(
        '--teamB',
        type=str,
        default='Blue Hawks',
        help='Nazwa drugiej dru≈ºyny (domy≈õlnie: Blue Hawks)'
    )
    parser.add_argument(
        '--seed',
        type=int,
        default=None,
        help='Seed dla generatora losowego (dla powtarzalno≈õci wynik√≥w)'
    )
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='Wy≈õwietl szczeg√≥≈Çowe informacje podczas symulacji'
    )
    
    args = parser.parse_args()
    
    # Ustaw seed je≈õli podano
    if args.seed is not None:
        set_random_seed(args.seed)
        print(f"üé≤ Ustawiono seed: {args.seed} (wynik bƒôdzie powtarzalny)")
    
    # Za≈Çaduj dru≈ºyny
    try:
        teams = load_teams_from_json('data/teams.json')
    except FileNotFoundError:
        print("‚ùå B≈ÇƒÖd: Nie znaleziono pliku data/teams.json")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå B≈ÇƒÖd parsowania JSON: {e}")
        sys.exit(1)
    
    # Sprawd≈∫ czy dru≈ºyny istniejƒÖ
    if args.teamA not in teams:
        print(f"‚ùå B≈ÇƒÖd: Dru≈ºyna '{args.teamA}' nie istnieje w pliku teams.json")
        print(f"   Dostƒôpne dru≈ºyny: {', '.join(teams.keys())}")
        sys.exit(1)
    
    if args.teamB not in teams:
        print(f"‚ùå B≈ÇƒÖd: Dru≈ºyna '{args.teamB}' nie istnieje w pliku teams.json")
        print(f"   Dostƒôpne dru≈ºyny: {', '.join(teams.keys())}")
        sys.exit(1)
    
    team_a = teams[args.teamA]
    team_b = teams[args.teamB]
    
    # Utw√≥rz silnik meczowy i symuluj
    print(f"\n‚öΩ FOOTBALL MANAGER - MATCH ENGINE")
    print(f"   Mecz: {team_a.name} vs {team_b.name}")
    print(f"   Czas trwania: 10 minut (5 min ka≈ºda po≈Çowa)\n")
    
    engine = MatchEngine(team_a, team_b, verbose=True, real_time=False)
    report = engine.simulate_match()
    
    # Wy≈õwietl raport
    print_match_report(report)


if __name__ == "__main__":
    main()
